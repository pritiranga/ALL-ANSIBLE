#Modules in ansible

1. uri -->
  - Used to interact with REST APIs or web services over HTTP, HTTPS or FTP.
  - It allows you to send HTTP/HTTPS requests (like GET, POST, PUT, DELETE, HEAD, etc.) and handle responses directly within an Ansible playbook.
  - Use Cases:
    - Testing the availability of a web service
    - Download file from a URL
    - Sending data to a REST API (e.g., JSON payloads)
  - Example:
    - name: Download a file
      ansible.builtin.uri:
        url: "https://example.com/file.zip"
        dest: "/tmp/file.zip"
        method: GET
        return_content: no


2. fail -->
  - Intentially stop the ansible playbook execution and mark it as failed, if given condition is met.
  - Example:
    - name: Fail if the config file is missing
      ansible.builtin.fail:
        msg: "The config file is missing!"
      when: not lookup('file', '/etc/app/config.yml')


3. copy -->
  - Copies a file or a directory structure from the local or remote machine to a location on the remote machine.
  - Syntax:
    - name: Copy a file to the target node
      ansible.builtin.copy:
        src: /path/to/source/file
        dest: /path/to/destination/file


4. shell -->
  - When you need to execute complex shell commands.
  - When piping (|) or redirection (>, >>) is required.
  - When command chaining (&&, ;, ||) is needed.
  - Syntax:
    - name: Run a shell command
      ansible.builtin.shell: "<command>"


5. file -->
  - Managing files and directories
  - Create, delete, or modify files and directories
  - Change file permissions, ownership, and timestamps
  - Create symbolic links
  - Syntax:
    - name: Example using file module
      ansible.builtin.file:
        path: /path/to/file_or_directory
        state: <file|directory|absent|link>
        mode: '0755'
        owner: root
        group: root
  - state: file vs state: touch 
    state: file -> Ensures that a file is exists. Create if not exists.
    state: touch -> Ensures that a file is exists, create if not exists and update its timestamp.


6. get_url -->
  - Download files from a url and saved to a location on remote machine.
  - Syntax:
    - name: Download a file using get_url
      ansible.builtin.get_url:
        url: "<URL>"
        dest: "<destination_path>"
        mode: "<permissions>"
        owner: "<owner>"
        group: "<group>"


7. replace -->
  - Search for a pattern in a file and replace with specified string.
  - Syntax:
    - name: Replace text in a file
      ansible.builtin.replace:
        path: "<file_path>"
        regexp: "<pattern_to_match>"
        replace: "<replacement_string>"
  - if want to search for a pattern in multiple files and replace the specified string.
  - Syntax:
    - name: Replace text in multiple files 
      ansible.builtin.replace:
        path: "{{ item }}"
        regexp: "<pattern_to_match>"
        replace: "<replacement_string>"
      with_items: 
        - <file1_path>
        - <file2_path>


8. command -->
  - Executing any command on remote machine as like you executing command on terminal but without loading shell environment.
  - Syntax:
    - name: run a command
      ansible.builtin.command: "<command>"


9. package -->
  - This module is an abstraction layer over all package managers like yum, apt, dnf, etc. we can just use this module even if we have different linux distributions.
  - Syntax:
    - name: Install a package
      ansible.builtin.package:
        name: <package_name>
        state: present


10. service -->
  - Manages services on remote machine for general tasks.
  - Syntax:
    - name: Manage a service
      ansible.builtin.service:
        name: <service_name>
        state: <state>  #state: started/stopped/restarted/reloaded 
        enabled: <yes/no>  # if we want to start on boot or not
          

11. systemd -->
  - Similar to the service module but specifically designed for systemd-based systems, providing more granular control over systemd features like drop-in files, masking, and daemon reload.
  - Example:
    - name: Reload systemd configuration
      ansible.builtin.systemd:
        daemon_reload: yes


12. lineinfile -->
  - Add a line to a file if itâ€™s not already present.
  - Modify an existing line in a file.
  - Ensure a line is present or absent in a file.
  - Syntax:
    - name: Update or add a line in a file
      ansible.builtin.lineinfile:
        path: <file_path>
        line: "<line_to_add>"
        state: present/absent


13. set_fact -->
  - Store temporary values
  - Calculate values dynamically during playbook execution.
  - Facts set with set_fact are available only within the playbook.
  - If you need facts across playbooks, use registered variables or gather facts.
  - Example:
    - name: Set a calculated fact
      ansible.builtin.set_fact:
        sum: "{{ 5 + 3 }}"

    - name: Display the calculated fact
      ansible.builtin.debug:
        msg: "Sum is {{ sum }}"


14. unarchive -->
  - Extract archive files (like .zip, .tar, .gz, .bz2).
  - Extract files on local or remote machines.
  - Supports both local paths and URLs.
  - Syntax:
    - name: Extract archive
      ansible.builtin.unarchive:
        src: /path/to/file.tar.gz
        dest: /path/to/destination/
        remote_src: yes/no     # if archive is already on the target machine then set remote_src to yes otherwise to no. 


15. template -->
  - Create or update configuration files dynamically.
  - Use Jinja2 templates to replace placeholders ({{ }}) with actual values from Ansible variables.
  - Define a template file (.j2) with placeholders for dynamic values.
  - The template module processes these templates and creates the final file on the target system.
  - Store templates in a templates/ directory within your playbook.
  - Example:
    Create a Jinja2 template file named with nginx.conf.j2:
    
    server {
      listen {{ http_port }};
      server_name {{ server_name }};
    }
    
    We can use the template module to create a real nginx.conf file:
    - name: Create NGINX config file
      ansible.builtin.template:
        src: nginx.conf.j2
        dest: /etc/nginx/nginx.conf
        owner: root
        group: root
        mode: "0644"
      vars:
        http_port: 80
        server_name: example.com


16. pause -->
  - When we want to pause playbook execution for a specified amount of time or until a user input is received.
  - Example1:
    - name: Pause for 10 seconds
      ansible.builtin.pause:
        seconds: 10
  - Example2:
    - name: Wait for user confirmation
      ansible.builtin.pause:
        prompt: "Press ENTER to continue"


